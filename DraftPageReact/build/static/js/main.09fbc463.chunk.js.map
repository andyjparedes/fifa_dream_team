{"version":3,"sources":["logo.svg","Formation.js","CurrentDraft.js","Firebase/firebase.jsx","Components/Database.jsx","Components/PlayerTeam.jsx","DraftPageMaster.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Formation","viewBox","xmlns","width","height","React","Component","CurrentDraft","this","getPlayers","currentList","numOfPlayers","count","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","columns","field","headerName","sortable","filter","PlayerDatabase","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","state","rows","header","className","style","columnDefs","rowData","onColumnValueChanged","onRowDoubleClicked","event","handleClick","animateRows","test","NAME","CLUB","LEAGUE","POSITION","TIER","RATING","PACE","SHOOTING","PASSING","DRIBBLING","DEFENDING","PHYSICAL","LOADDATE","data","getData","refreshGrid","bind","team","curTeam","t1","t2","t3","t4","t5","t6","setState","refreshCells","DialogBox","useState","open","setOpen","DialogState","handleClose","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","player","DialogActions","Button","onClick","color","handleConfirmDraft","autoFocus","require","DraftPageMaster","NumPlayersTeam","numTeams","curPlayerSelected","draftedPlayer","draftType","snakeDraftSide","pickNum","myData","Object","keys","map","key","rowNode","node","concat","res","updateRowData","remove","console","log","addPlayerToTeam","onRemoveSelected","isDraftDone","DraftFinished","window","href","variant","target","rel","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09fbc463.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nclass Formation extends React.Component {\n    render() {\n        return(\n            <div>\n           <svg viewBox=\"0 0 200 80\" xmlns=\"http://www.w3.org/2000/svg\">\n           <rect width=\"200\" height=\"100\"></rect>   \n           </svg>\n           \n            </div>\n        )\n    }\n}\n\nexport default Formation;","import React from 'react';\n//import Card from 'react-bootstrap/Card';\n\nclass CurrentDraft extends React.Component {\n    render() {\n        return(\n            <div>\n                {this.getPlayers([\"Ronaldo\", \"Messi\"], 4)}\n            </div>\n        )\n    }\n\n    getPlayers(currentList, numOfPlayers){\n        var tempList = [];\n        var count = 0;\n        for(const player of currentList){\n            if(count === numOfPlayers){\n                count = 0;\n            }\n            count++;\n            // tempList.push(\n            //     <Card>\n            //         <Card.Body>\n            //             <Card.Title>Player {count}</Card.Title>\n            //             <Card.Subtitle>{player.name}</Card.Subtitle>\n            //         </Card.Body>\n            //     </Card>\n            // )\n        }\n        return tempList;\n    }\n}\n\nexport default CurrentDraft;","/** This file instantiates the firebase database for the apppication, ensuring that all of the applications files do not each create a firebase instance themselves\n *  After importing into file, use as normal\n * \n * @Author agoethel\n * \n * 10/25 file created - agoethel\n */\nimport * as firebase from 'firebase';\nconst devConfig = {\n    apiKey: \"AIzaSyDLDVDb3Jx0abcKXNXYXMOfYXOf0Kdw6zM\",\n    authDomain: \"fifa-dream-team.firebaseapp.com\",\n    databaseURL: \"https://fifa-dream-team.firebaseio.com\",\n    projectId: \"fifa-dream-team\",\n    storageBucket: \"fifa-dream-team.appspot.com\",\n    messagingSenderId: \"121726490175\",\n    appId: \"1:121726490175:web:a5872b9806b4f39a930a8a\",\n    measurementId: \"G-QF1W7C66XP\"\n};\nfirebase.initializeApp(devConfig);\n\nexport default firebase;","import firebase from '../Firebase/firebase';\nimport React,{Component} from 'react';\nimport {AgGridReact} from 'ag-grid-react'\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n//var database = firebase.database();\n\n/** Column config, field = name in JSON, headerName = how you would like to display it on website\n * \n */\nconst columns = [\n    { field: 'NAME', headerName: 'Name'},\n    { field: 'RATING', headerName: 'Overall',sortable:true,filter:\"agNumberColumnFilter\"  },\n    { field: 'POSITION', headerName: 'Position',sortable:true  },\n\t{ field: 'PACE', headerName: 'Pace',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'PASSING', headerName: 'Passing',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'DEFENDING', headerName: 'Defending',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'SHOOTING', headerName: 'Shooting',sortable:true,filter:\"agNumberColumnFilter\" } ];\n/** This is the main class for displaying the player database for the Draft Page\n *  \n * @author goethel\n * @param props default props for a react component\n * \n * Changelog:\n * 10/25 - file and class created - goethel\n */\n  export default class PlayerDatabase extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\trows:this.props.props.rows\n\t\t}\n\t\t\n\t}\n\tcomponentDidMount() {\n\t\t\n\t}\n    /** This function will query the database for a particular player\n     * \n     * @param {string} header \n     */\n    getPlayer(header) {\n        \n\t}\n\tonGridReady = params => {\n\t\tthis.gridApi = params.api;\n\t\tthis.gridColumnApi = params.columnApi;\n\t\tparams.api.sizeColumnsToFit();\n\t\t\n\t  };\n    render() {\n        return (\n\t\t\t<div \n\t\t\tclassName=\"ag-theme-balham-dark\"\n\t\t\tstyle={{ \n\t\t\theight: '70vh', \n\t\t\twidth: '65vw'}} \n\t\t  >\n\t\t\t<AgGridReact\n\t\t\t  columnDefs={columns}\n\t\t\t  rowData={this.props.props.rows} onGridReady={this.onGridReady} onColumnValueChanged={(params)=> {params.api.sizeColumnsToFit()}} onRowDoubleClicked={(event) => { this.props.props.handleClick(event)}} animateRows={true}>\n\t\t\t</AgGridReact>\n\t\t  </div>);\n    }\n}","import firebase from '../Firebase/firebase';\nimport React,{Component} from 'react';\nimport {AgGridReact} from 'ag-grid-react'\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n//var database = firebase.database();\n\n/** Column config, field = name in JSON, headerName = how you would like to display it on website\n *  For information regarding datatable API\n * @see https://www.ag-grid.com/documentation-main/documentation.php\n */\nconst columns = [\n    { field: 'NAME', headerName: 'Name', },\n    { field: 'RATING', headerName: 'Overall' },\n\t{ field: 'POSITION', headerName: 'Position' }];\nconst gridOptions = {\n\n\n};\nconst test = {\n\tNAME: \"Messi\",\n\tCLUB: \"FC-Barcelona\",\n\tLEAGUE: \"BBVA\",\n\tPOSITION: \"LW\",\n\tTIER: \"Gold\",\n\tRATING: \"94\",\n\tPACE: \"92\",\n\tSHOOTING: \"90\",\n\tPASSING: \"91\",\n\tDRIBBLING: \"95\",\n\tDEFENDING: \"37\",\n\tPHYSICAL: \"81\",\n\tLOADDATE: \"2018-09-19 12:10:05\"\n}\n/** This is the main class for displaying the currently selecting teams players\n *  \n * @author goethel\n * @param props default props for a react component\n * \n * Changelog:\n * 10/25 - file and class created - goethel\n */\n  export default class PlayerDatabase extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\tlet data = this.getData();\n\t\tthis.state = {\n\t\t\trows:data\n\t\t}\n\t\tthis.refreshGrid.bind(this);\n\t}\n\tgetData() {\n\t\t\n\t\tlet team = this.props.curTeam;\n\t\tlet data = {test};\n\t\tif(team ==1) {\n           data = this.props.t1;\n        }\n        else if(team ==2) {\n\t\t\tdata = this.props.t2;\n        }\n        else if(team ==3) {\n\t\t\tdata = this.props.t3;\n        }\n        else if(team ==4) {\n\t\t\tdata = this.props.t4;        }\n        else if(team ==5) {\n\t\t\tdata = this.props.t5;        }\n        else if(team ==6) {\n\t\t\tdata = this.props.t6;        }\n\t\treturn data;\n\t}\n\tcomponentWillReceiveProps() {\n\t\tthis.setState({rows:this.getData()});\n\t}\n\tsizeToFit() {\n\t\tthis.gridApi.sizeColumnsToFit()\n\t}\n\tonGridReady = params => {\n\t\tthis.gridApi = params.api;\n\t\tthis.gridColumnApi = params.columnApi;\n\t\tparams.api.sizeColumnsToFit();\n\t\t\n\t  };\n\trefreshGrid() {\n    \tthis.gridApi.refreshCells();\n\t}\n    render() {\n        return (\n\t\t\t<div \n\t\t\tclassName=\"ag-theme-balham-dark\"\n\t\t\tstyle={{ \n\t\t\theight: '50vh', \n\t\t\twidth: '35vw'}}>\n\t\t\t<AgGridReact\n\t\t\t  columnDefs={columns}\n\t\t\t  rowData={this.getData()} onGridReady={this.onGridReady} >\n\t\t\t</AgGridReact>\n\t\t  </div>);\n    }\n}","import React from 'react';\nimport Formation from './Formation';\nimport CurrentDraft from './CurrentDraft';\nimport PlayerDatabase from './Components/Database.jsx';\nimport PlayerTeam from './Components/PlayerTeam.jsx';\nimport Button from '@material-ui/core/Button';\nimport firebase from './Firebase/firebase'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/** This is an arrow function to set up the Dialog/Confirmation popup to draft a player they clicked on\n * @author goethel\n * @param {\n * DialogState:boolean\n * handleClose:function (from parent component)\n * } params \n * CHANGES\n * 11/11 - Function Created, Code moved outside of class to avoid Hook errors with react - goethel\n */\nconst DialogBox = (params) => {\n    const [open, setOpen] = React.useState(false);\n    \nif(params.props.DialogState == true && open == false) {\n    setOpen(true);\n}\nconst  handleClose = () => {\n    setOpen(false);\n    params.props.handleClose();\n}\nconst  handleConfirmed = () => {\n    setOpen(false);\n    params.props.handleConfirmDraft();\n}\n    return(<Dialog\n    open={open}\n    onClose={handleClose}\n    aria-labelledby=\"alert-dialog-title\"\n    aria-describedby=\"alert-dialog-description\"\n    >\n    <DialogTitle id=\"alert-dialog-title\">{\"Draft This Player?\"}</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-description\">\n        {params.props.player.NAME}{\"\\n\"}\n        {params.props.player.RATING}\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={handleClose} color=\"primary\">\n        Cancel\n      </Button>\n      <Button onClick={handleConfirmed} color=\"primary\" autoFocus>\n        Draft\n      </Button>\n    </DialogActions>\n    </Dialog>);\n}\n\nconst numPlayers = 30; // This is to allow for testing/development, so that we do not run over our server quota by pulling the whole database every time. Will be increased to top 2000 during demos\nconst data=require('./Player.json');\n/** This is the parent Component of all the components in the Draft Page, so that state can be shared easily\n * \n * @author shivi \n * \n * CHANGELOG\n * 11/01 Updated with documentation and a button linking to results page for testing - goethel\n * 10/30 Component Created - shivi\n */\nclass DraftPageMaster extends React.Component {\n    \n    constructor(props) {\n        // This is where you should grab the settings from index browser storage to use throughout draft\n        super(props);\n        this.state = {\n\t\trows:[],\n                t1:[],\n                t2:[],\n                t3:[],\n                t4:[],\n                t5:[],\n                t6:[],\n                \n        NumPlayersTeam:12, // Number of players per team (48 is a bit much!)\n        numTeams:6, // number of teams\n        DialogState:false,\n        curPlayerSelected:\"\", // The player that the user double clicked on\n        draftedPlayer:\"\", // This variable will update with the last drafted player\n        curTeam:1, // Allows Players to select which team drafts first\n        draftType:\"normal\", // Snake or Normal\n        snakeDraftSide:1, // Snake going forward round (1234) or backwards round (4321)\n        pickNum:1 // CUrrent Pick #\n\n        }\n\n    // Any function used in callback must be bound here or React will not work with them\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleConfirmDraft = this.handleConfirmDraft.bind(this);\n    }\n    /** This function grabs the X number of players from firebase, and by default sorts by overall or rating\n     * \n     * @author goethel \n     * \n     * CHANGELOG\n     * 11/5 - added option for local DB usage - goethel\n     * 11/2 - file created - goethel\n     */\n    componentDidMount() {\n        var myData = Object.keys(data).map(key => {\n            return data[key];\n        })\n        var that = this;\n        if(false) {\n        var mostViewedPosts = firebase.database().ref('Players').orderByChild('RATING').limitToLast(numPlayers).once(\"value\").then(function(snapshot){\n            snapshot.forEach(function (childSnapshot) {\n                var childData = childSnapshot.val();\n                // This is where checks for Drafted players will occur\n                that.setState({rows:[...that.state.rows,childData]});\n            });\n        });   \n        } \n        this.setState({rows:myData})\n     \n    }\n    /** This handles the initial opening of the DialogBox after the user double clicks on a player in the Data Grid\n     * \n     */\n    handleClick(event) {\n\n       this.gridApi = event.api;\n        this.rowNode = event.node;\n        this.setState({DialogState:true,curPlayerSelected:event.data})\n    }\n    /** This function closes the dialog box, if the user clicks cancel\n     * \n     * \n     * 11/11 - Function Created\n     */\n    handleClose() {\n        this.setState({DialogState:false})\n    }\n    /** This function adds the drafted player to the correct team\n     * @author goethel\n     * \n     * 11/13 - Function Created\n     */\n    addPlayerToTeam() {\n        let team = this.state.curTeam;\n\n        if(team ==1) {\n            this.setState({t1:(this.state.t1.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==2) {\n            this.setState({t2:(this.state.t2.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==3) {\n            this.setState({t3:(this.state.t3.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==4) {\n            this.setState({t4:(this.state.t4.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==5) {\n            this.setState({t5:(this.state.t5.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==6) {\n            this.setState({t6:(this.state.t6.concat(this.state.curPlayerSelected))});\n        }\n    }\n    /** This function removes a drafted player from the data grid\n     * \n     */\n    onRemoveSelected() {\n        var res = this.gridApi.updateRowData({ remove: [this.rowNode.data] });\n        console.log(res);\n      }\n    /** This is the function where the switchover code for changing who is drafting should occur\n     * \n     */\n    handleConfirmDraft() {\n        this.setState({DialogState:false,pickNum:(this.state.pickNum+1),draftedPlayer:this.state.curPlayerSelected});\n        this.addPlayerToTeam();\n       \n            this.onRemoveSelected();\n        \n        if(this.isDraftDone() == true) {\n            this.DraftFinished();\n        }\n        else {\n            if(this.state.draftType == \"normal\") {\n                if(this.state.curTeam==this.state.numTeams) {\n                    this.setState({curTeam:1});\n                }\n                else {\n                    this.setState({curTeam:(this.state.curTeam+1)})\n                }\n            }\n            // Code for evaluating next pick in snake draft\n            else if(this.state.draftType == \"snake\") {\n                console.log(this.state.curTeam+\", forward/back:\"+this.state.snakeDraftSide); // debug\n                    if(this.state.snakeDraftSide == 1) {\n                        if(this.state.curTeam == this.state.numTeams) {\n                            this.setState({snakeDraftSide:0})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam+1)})\n                        }\n                    }\n                    else {\n                        if(this.state.curTeam == 1) {\n                            this.setState({snakeDraftSide:1})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam-1)})\n                        }\n                    }\n                \n            }\n            // Code for switching to next pick\n            \n        }\n    }\n    /** This function will check if Draft is Done or not, treat as js function\n     * \n     */\n    isDraftDone() {\n        if(this.state.pickNum == this.state.numTeams*this.state.NumPlayersTeam) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /** This Function handles the eventual switchover to Results Page, and stores the Team data into the local browser storage to be used by the Results Page\n     * \n     */\n    DraftFinished() {\n        window.href(\"../../resultpage.html\");\n    }\n    render() {\n        return(\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>\n                    Team {this.state.curTeam} currently drafting\n                    </h1>\n                    <h2>Pick Number {this.state.pickNum}</h2>\n                </header>\n                <div className=\"draft-Body\">\n                \n                    <DialogBox props={{DialogState:this.state.DialogState,handleClose:this.handleClose,handleConfirmDraft:this.handleConfirmDraft,player:this.state.curPlayerSelected}}></DialogBox>\n                    <CurrentDraft/>\n                    <PlayerDatabase props={{rows:this.state.rows,handleClick:this.handleClick}}></PlayerDatabase>\n                    <div>\n                    <Formation/>\n                    <PlayerTeam curTeam={this.state.curTeam} t1={this.state.t1} t2={this.state.t2} t3={this.state.t3} t4={this.state.t4} t5={this.state.t5} t6={this.state.t6}></PlayerTeam>\n                    </div>\n                    \n                </div>\n                <div>\n                <Button href=\"../../tradingpage.html\" color=\"primary\" variant=\"contained\" className=\"results\">Results Page (TESTING ONLY)</Button>\n                </div>\n                \n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Built with React.js\n                 </a>\n            </div>\n        )\n    }\n    currentDraft(){\n\n    }\n}\n\nexport default DraftPageMaster;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DraftPageMaster from './DraftPageMaster';\n\nfunction App() {\n  return (\n    <DraftPageMaster/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}