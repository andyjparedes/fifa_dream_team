{"version":3,"sources":["logo.svg","Formation.js","CurrentDraft.js","Firebase/firebase.jsx","Components/Database.jsx","Components/PlayerTeam.jsx","DraftPageMaster.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Formation","viewBox","xmlns","width","height","React","Component","CurrentDraft","props","state","currentPlayerNo","currentPlayerName","currentList","tempList","console","log","player","push","Card","Body","Title","playerNum","Subtitle","playerDrafted","tempList2","this","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","columns","field","headerName","sortable","filter","PlayerDatabase","onGridReady","params","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","rows","header","className","style","columnDefs","rowData","onColumnValueChanged","onRowDoubleClicked","event","handleClick","animateRows","test","NAME","CLUB","LEAGUE","POSITION","TIER","RATING","PACE","SHOOTING","PASSING","DRIBBLING","DEFENDING","PHYSICAL","LOADDATE","data","getData","refreshGrid","bind","team","curTeam","t1","t2","t3","t4","t5","t6","setState","refreshCells","DialogBox","useState","open","setOpen","DialogState","handleClose","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","Button","onClick","color","handleConfirmDraft","autoFocus","require","DraftPageMaster","NumPlayersTeam","localStorage","getItem","numTeams","curPlayerSelected","draftedPlayer","curTeamName","draftType","snakeDraftSide","pickNum","dev","topBarList","that","database","ref","orderByChild","limitToLast","once","then","snapshot","forEach","childSnapshot","childData","val","rowNode","node","cardInfo","list","length","shift","concat","res","updateRowData","remove","addPlayerToTeam","isDraftDone","DraftFinished","onRemoveSelected","setItem","JSON","stringify","window","location","href","playerList","variant","target","rel","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.db0db4c8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\nimport SvgIcon from '@material-ui/core/SvgIcon';\n\nclass Formation extends React.Component {\n    render() {\n        return(\n            <div>\n           <svg viewBox=\"0 0 200 80\" xmlns=\"http://www.w3.org/2000/svg\">\n           <rect width=\"200\" height=\"100\"></rect>   \n           </svg>\n           \n            </div>\n        )\n    }\n}\n\nexport default Formation;","import React,{Component} from 'react';\nimport { Card } from 'reactstrap';\n\nexport default class CurrentDraft extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayerNo: 0,\n            currentPlayerName:\"\"\n\n        };\n    }\n    render() {\n        return(\n            <div>\n              {/* {this.getPlayers(this.props.playerList)}\n                {this.getCurrentPlayer()} */}\n            </div>\n        )\n    }\n\n    getPlayers(currentList){\n        var tempList = [];\n        console.log(currentList);\n        for(const player of []){\n            tempList.push(\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Player {player.playerNum}</Card.Title>\n                        <Card.Subtitle>{player.playerDrafted}</Card.Subtitle>\n                    </Card.Body>\n                </Card>\n            )\n        }\n        return tempList;\n    }\n\n    getCurrentPlayer(){\n        var tempList2 = [];\n        tempList2.push(\n            <Card>\n                <Card.Body>\n                    <Card.Title>Player {this.state.currentPlayerNo}</Card.Title>\n                    <Card.Subtitle>Drafting...</Card.Subtitle>\n                </Card.Body>\n            </Card>\n        )\n        return tempList2;\n    }\n}\n\n","/** This file instantiates the firebase database for the apppication, ensuring that all of the applications files do not each create a firebase instance themselves\n *  After importing into file, use as normal\n * \n * @Author agoethel\n * \n * 10/25 file created - agoethel\n */\nimport * as firebase from 'firebase';\nconst devConfig = {\n    apiKey: \"AIzaSyDLDVDb3Jx0abcKXNXYXMOfYXOf0Kdw6zM\",\n    authDomain: \"fifa-dream-team.firebaseapp.com\",\n    databaseURL: \"https://fifa-dream-team.firebaseio.com\",\n    projectId: \"fifa-dream-team\",\n    storageBucket: \"fifa-dream-team.appspot.com\",\n    messagingSenderId: \"121726490175\",\n    appId: \"1:121726490175:web:a5872b9806b4f39a930a8a\",\n    measurementId: \"G-QF1W7C66XP\"\n};\nfirebase.initializeApp(devConfig);\n\nexport default firebase;","import firebase from '../Firebase/firebase';\nimport React,{Component} from 'react';\nimport {AgGridReact} from 'ag-grid-react'\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n//var database = firebase.database();\n\n/** Column config, field = name in JSON, headerName = how you would like to display it on website\n * \n */\nconst columns = [\n    { field: 'NAME', headerName: 'Name'},\n    { field: 'RATING', headerName: 'Overall',sortable:true,filter:\"agNumberColumnFilter\"  },\n    { field: 'POSITION', headerName: 'Position',sortable:true  },\n\t{ field: 'PACE', headerName: 'Pace',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'PASSING', headerName: 'Passing',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'DEFENDING', headerName: 'Defending',sortable:true,filter:\"agNumberColumnFilter\"   },\n\t{ field: 'SHOOTING', headerName: 'Shooting',sortable:true,filter:\"agNumberColumnFilter\" } ];\n/** This is the main class for displaying the player database for the Draft Page\n *  \n * @author goethel\n * @param props default props for a react component\n * \n * Changelog:\n * 10/25 - file and class created - goethel\n */\n  export default class PlayerDatabase extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\t\n\t\tthis.state = {\n\t\t\trows:this.props.props.rows\n\t\t}\n\t\t\n\t}\n\tcomponentDidMount() {\n\t\t\n\t}\n    /** This function will query the database for a particular player\n     * \n     * @param {string} header \n     */\n    getPlayer(header) {\n        \n\t}\n\tonGridReady = params => {\n\t\tthis.gridApi = params.api;\n\t\tthis.gridColumnApi = params.columnApi;\n\t\tparams.api.sizeColumnsToFit();\n\t\t\n\t  };\n    render() {\n        return (\n\t\t\t<div \n\t\t\tclassName=\"ag-theme-balham-dark\"\n\t\t\tstyle={{ \n\t\t\theight: '70vh', \n\t\t\twidth: '65vw'}} \n\t\t  >\n\t\t\t<AgGridReact\n\t\t\t  columnDefs={columns}\n\t\t\t  rowData={this.props.props.rows} onGridReady={this.onGridReady} onColumnValueChanged={(params)=> {params.api.sizeColumnsToFit()}} onRowDoubleClicked={(event) => { this.props.props.handleClick(event)}} animateRows={true}>\n\t\t\t</AgGridReact>\n\t\t  </div>);\n    }\n}","import firebase from '../Firebase/firebase';\nimport React,{Component} from 'react';\nimport {AgGridReact} from 'ag-grid-react'\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-balham-dark.css';\n//var database = firebase.database();\n\n/** Column config, field = name in JSON, headerName = how you would like to display it on website\n *  For information regarding datatable API\n * @see https://www.ag-grid.com/documentation-main/documentation.php\n */\nconst columns = [\n    { field: 'NAME', headerName: 'Name', },\n    { field: 'RATING', headerName: 'Overall' },\n\t{ field: 'POSITION', headerName: 'Position' }];\nconst gridOptions = {\n\n\n};\nconst test = {\n\tNAME: \"Messi\",\n\tCLUB: \"FC-Barcelona\",\n\tLEAGUE: \"BBVA\",\n\tPOSITION: \"LW\",\n\tTIER: \"Gold\",\n\tRATING: \"94\",\n\tPACE: \"92\",\n\tSHOOTING: \"90\",\n\tPASSING: \"91\",\n\tDRIBBLING: \"95\",\n\tDEFENDING: \"37\",\n\tPHYSICAL: \"81\",\n\tLOADDATE: \"2018-09-19 12:10:05\"\n}\n/** This is the main class for displaying the currently selecting teams players\n *  \n * @author goethel\n * @param props default props for a react component\n * \n * Changelog:\n * 10/25 - file and class created - goethel\n */\n  export default class PlayerDatabase extends Component {\n    constructor(props) {\n\t\tsuper(props);\n\t\tlet data = this.getData();\n\t\tthis.state = {\n\t\t\trows:data\n\t\t}\n\t\tthis.refreshGrid.bind(this);\n\t}\n\tgetData() {\n\t\t\n\t\tlet team = this.props.curTeam;\n\t\tlet data = {test};\n\t\tif(team ==1) {\n           data = this.props.t1;\n        }\n        else if(team ==2) {\n\t\t\tdata = this.props.t2;\n        }\n        else if(team ==3) {\n\t\t\tdata = this.props.t3;\n        }\n        else if(team ==4) {\n\t\t\tdata = this.props.t4;        }\n        else if(team ==5) {\n\t\t\tdata = this.props.t5;        }\n        else if(team ==6) {\n\t\t\tdata = this.props.t6;        }\n\t\treturn data;\n\t}\n\tcomponentWillReceiveProps() {\n\t\tthis.setState({rows:this.getData()});\n\t}\n\tsizeToFit() {\n\t\tthis.gridApi.sizeColumnsToFit()\n\t}\n\tonGridReady = params => {\n\t\tthis.gridApi = params.api;\n\t\tthis.gridColumnApi = params.columnApi;\n\t\tparams.api.sizeColumnsToFit();\n\t\t\n\t  };\n\trefreshGrid() {\n    \tthis.gridApi.refreshCells();\n\t}\n    render() {\n        return (\n\t\t\t<div \n\t\t\tclassName=\"ag-theme-balham-dark\"\n\t\t\tstyle={{ \n\t\t\theight: '50vh', \n\t\t\twidth: '35vw'}}>\n\t\t\t<AgGridReact\n\t\t\t  columnDefs={columns}\n\t\t\t  rowData={this.getData()} onGridReady={this.onGridReady} >\n\t\t\t</AgGridReact>\n\t\t  </div>);\n    }\n}","import React from 'react';\nimport Formation from './Formation';\nimport CurrentDraft from './CurrentDraft';\nimport PlayerDatabase from './Components/Database.jsx';\nimport PlayerTeam from './Components/PlayerTeam.jsx';\nimport Button from '@material-ui/core/Button';\nimport firebase from './Firebase/firebase'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/** This is an arrow function to set up the Dialog/Confirmation popup to draft a player they clicked on\n * @author goethel\n * @param {\n * DialogState:boolean\n * handleClose:function (from parent component)\n * } params \n * CHANGES\n * 11/11 - Function Created, Code moved outside of class to avoid Hook errors with react - goethel\n */\nexport const DialogBox = (params) => {\n    const [open, setOpen] = React.useState(false);\n    \nif(params.props.DialogState == true && open == false) {\n    setOpen(true);\n}\nconst  handleClose = () => {\n    setOpen(false);\n    params.props.handleClose();\n}\nconst  handleConfirmed = () => {\n    setOpen(false);\n    params.props.handleConfirmDraft();\n}\n    return(<Dialog\n    open={open}\n    onClose={handleClose}\n    aria-labelledby=\"alert-dialog-title\"\n    aria-describedby=\"alert-dialog-description\"\n    >\n    <DialogTitle id=\"alert-dialog-title\">{\"Draft This Player?\"}</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-description\">\n        {params.props.player.NAME}{\"\\n\"}\n        {params.props.player.RATING}\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={handleClose} color=\"primary\">\n        Cancel\n      </Button>\n      <Button onClick={handleConfirmed} color=\"primary\" autoFocus>\n        Draft\n      </Button>\n    </DialogActions>\n    </Dialog>);\n}\n\nconst numPlayers = 30; // This is to allow for testing/development, so that we do not run over our server quota by pulling the whole database every time. Will be increased to top 2000 during demos\nconst data=require('./Player.json');\n/** This is the parent Component of all the components in the Draft Page, so that state can be shared easily\n * \n * @author shivi \n * \n * CHANGELOG\n * 11/01 Updated with documentation and a button linking to results page for testing - goethel\n * 10/30 Component Created - shivi\n */\nclass DraftPageMaster extends React.Component {\n    \n    constructor(props) {\n        // This is where you should grab the settings from index browser storage to use throughout draft\n        super(props);\n        this.state = {\n\t\trows:[],\n                t1:[],\n                t2:[],\n                t3:[],\n                t4:[],\n                t5:[],\n                t6:[],\n                \n        NumPlayersTeam: localStorage.getItem(\"index_numplayers\"), // Number of players per team\n        numTeams: localStorage.getItem(\"index_numteams\"), // Number of teams\n        DialogState:false,\n        curPlayerSelected:\"\", // The player that the user double clicked on\n        draftedPlayer:\"\", // This variable will update with the last drafted player\n        curTeam:1, // Allows Players to select which team drafts first\n        curTeamName: localStorage.getItem(\"index_team\" + 1), // Team name of current team\n        draftType: localStorage.getItem(\"index_roundtrans\"), // Snake or Normal draft\n        snakeDraftSide:1, // Snake going forward round (1234) or backwards round (4321)\n        pickNum:1, // CUrrent Pick #\n        dev:false,\n        topBarList: [] // List of players on the top bar\n        }\n    \n    // Any function used in callback must be bound here or React will not work with them\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleConfirmDraft = this.handleConfirmDraft.bind(this);\n    }\n    /** This function grabs the X number of players from firebase, and by default sorts by overall or rating\n     * \n     * @author goethel \n     * \n     * CHANGELOG\n     * 11/5 - added option for local DB usage - goethel\n     * 11/2 - file created - goethel\n     */\n    componentDidMount() {\n\n        // var myData = Object.keys(data).map(key => {\n        //     if(!(data[key].CLUB == \"Icons\")) {\n        //         return data[key];\n        //     }\n        //     else {\n        //         delete data[key];\n        //     }\n        // })\n        var that = this;\n        if(this.state.dev == true) {\n        var mostViewedPosts = firebase.database().ref('Players').orderByChild('RATING').limitToLast(numPlayers).once(\"value\").then(function(snapshot){\n            snapshot.forEach(function (childSnapshot) {\n                var childData = childSnapshot.val();\n                // This is where checks for Drafted players will occur\n                that.setState({rows:[...that.state.rows,childData]});\n            });\n        });   \n        } \n        if(localStorage.getItem(\"index_numplayers\") != null) {\n            this.setState({rows:data,NumPlayersTeam:localStorage.getItem(\"index_numplayers\"),numTeams:localStorage.getItem(\"index_numteams\")});\n        }\n       else {\n           this.setState({rows:data,numTeams:3,NumPlayersTeam:2});\n       }\n     \n    }\n    /** This handles the initial opening of the DialogBox after the user double clicks on a player in the Data Grid\n     * \n     */\n    handleClick(event) {\n\n       this.gridApi = event.api;\n        this.rowNode = event.node;\n        this.setState({DialogState:true,curPlayerSelected:event.data})\n    }\n    /** This function closes the dialog box, if the user clicks cancel\n     * \n     * \n     * 11/11 - Function Created\n     */\n    handleClose() {\n        this.setState({DialogState:false})\n    }\n\n    /** This function adds the most recent drafted player onm the top bar.\n     * \n     * @author Shivi\n     * \n     * 11/14 - Function Created\n     */\n    createDraftedList(player){\n        var cardInfo = {};\n        cardInfo.playerNum = 0;\n        cardInfo.playerDrafted = player;\n        let list = this.state.topBarList;\n        if(list.length === this.state.numTeams){\n            list.shift();\n            list.push(player);\n        }\n        else{\n            list.push(player);\n        }\n\n    }\n\n\n    /** This function adds the drafted player to the correct team\n     * @author goethel\n     * \n     * 11/13 - Function Created\n     */\n    addPlayerToTeam() {\n        let team = this.state.curTeam;\n\n        if(team ==1) {\n            this.setState({t1:(this.state.t1.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==2) {\n            this.setState({t2:(this.state.t2.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==3) {\n            this.setState({t3:(this.state.t3.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==4) {\n            this.setState({t4:(this.state.t4.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==5) {\n            this.setState({t5:(this.state.t5.concat(this.state.curPlayerSelected))});\n        }\n        else if(team ==6) {\n            this.setState({t6:(this.state.t6.concat(this.state.curPlayerSelected))});\n        }\n    }\n    /** This function removes a drafted player from the data grid\n     * \n     */\n    onRemoveSelected() {\n        var res = this.gridApi.updateRowData({ remove: [this.rowNode.data] });\n        console.log(res);\n      }\n    /** This is the function where the switchover code for changing who is drafting should occur\n     * \n     */\n    handleConfirmDraft() {\n        this.setState({DialogState:false,pickNum:(this.state.pickNum+1),draftedPlayer:this.state.curPlayerSelected});\n        this.addPlayerToTeam();\n        debugger;\n        \n        if(this.isDraftDone() == true) {\n            this.DraftFinished();\n        }\n        else {\n            if(this.state.draftType == \"repeating\") {\n                if(this.state.curTeam==this.state.numTeams) {\n                    this.setState({curTeam:1});\n                    this.setState({curTeamName: localStorage.getItem(\"index_team\" + this.state.curTeam)});\n                }\n                else {\n                    this.setState({curTeam:(this.state.curTeam+1)});\n                    this.setState({curTeamName: localStorage.getItem(\"index_team\" + this.state.curTeam)});\n                }\n            }\n            // Code for evaluating next pick in snake draft\n            else if(this.state.draftType == \"snake\") {\n                console.log(this.state.curTeam+\", forward/back:\"+this.state.snakeDraftSide); // debug\n                    if(this.state.snakeDraftSide == 1) {\n                        if(this.state.curTeam == this.state.numTeams) {\n                            this.setState({snakeDraftSide:0})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam+1)});\n                        this.setState({curTeamName: localStorage.getItem(\"index_team\" + this.state.curTeam)});\n                        }\n                    }\n                    else {\n                        if(this.state.curTeam == 1) {\n                            this.setState({snakeDraftSide:1})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam-1)});\n                        this.setState({curTeamName: localStorage.getItem(\"index_team\" + this.state.curTeam)});\n                        }\n                    }\n                \n            }\n            // Code for switching to next pick\n            \n            }   \n            if(this.state.curPlayerSelected != \"\") {\n                this.onRemoveSelected();\n               }\n            \n    }\n    /** This function will check if Draft is Done or not, treat as js function\n     * \n     */\n    isDraftDone() {\n        if(this.state.pickNum >= this.state.numTeams*this.state.NumPlayersTeam) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /** This Function handles the eventual switchover to Results Page, and stores the Team data into the local browser storage to be used by the Results Page\n     * \n     */\n    DraftFinished() {\n        // Place finished teams here.\n        localStorage.setItem(\"draft_t1\", JSON.stringify(this.state.t1));\n        localStorage.setItem(\"draft_t2\", JSON.stringify(this.state.t2));\n        localStorage.setItem(\"draft_t3\", JSON.stringify(this.state.t3));\n        localStorage.setItem(\"draft_t4\", JSON.stringify(this.state.t4));\n        localStorage.setItem(\"draft_t5\", JSON.stringify(this.state.t5));\n        localStorage.setItem(\"draft_t6\", JSON.stringify(this.state.t6));\n\n        window.location.href=\"../../tradingpage.html\";\n    }\n    render() {\n        return(\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>\n                    {this.state.curTeamName} currently drafting\n                    </h1>\n                    <h2>Pick Number {this.state.pickNum}</h2>\n                </header>\n                <div className=\"draft-Body\">\n                \n                    <DialogBox props={{DialogState:this.state.DialogState,handleClose:this.handleClose,handleConfirmDraft:this.handleConfirmDraft,player:this.state.curPlayerSelected}}></DialogBox>\n                    <CurrentDraft playerList={this.state.topBarList}/>\n                    <PlayerDatabase props={{rows:this.state.rows,handleClick:this.handleClick}}></PlayerDatabase>\n                    <div>\n                    <Formation/>\n                    <PlayerTeam curTeam={this.state.curTeam} t1={this.state.t1} t2={this.state.t2} t3={this.state.t3} t4={this.state.t4} t5={this.state.t5} t6={this.state.t6}></PlayerTeam>\n                    </div>\n                    \n                </div>\n                <div>\n                <Button href=\"../../tradingpage.html\" color=\"primary\" variant=\"contained\" className=\"results\">Results Page (TESTING ONLY)</Button>\n                </div>\n                \n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Built with React.js\n                 </a>\n            </div>\n        )\n    }\n    currentDraft(){\n\n    }\n}\n\nexport default DraftPageMaster;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport DraftPageMaster from './DraftPageMaster';\n\nfunction App() {\n  return (\n    <DraftPageMaster/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}