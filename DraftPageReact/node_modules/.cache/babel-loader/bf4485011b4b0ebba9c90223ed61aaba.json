{"ast":null,"code":"import _slicedToArray from \"/Users/andrew/Desktop/CS506 Project/fifa_dream_team/DraftPageReact/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andrew/Desktop/CS506 Project/fifa_dream_team/DraftPageReact/src/DraftPageMaster.js\";\nimport React from 'react';\nimport Formation from './Formation';\nimport CurrentDraft from './CurrentDraft';\nimport PlayerDatabase from './Components/Database.jsx';\nimport PlayerTeam from './Components/PlayerTeam.jsx';\nimport Button from '@material-ui/core/Button';\nimport firebase from './Firebase/firebase';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n/** This is an arrow function to set up the Dialog/Confirmation popup to draft a player they clicked on\n * @author goethel\n * @param {\n * DialogState:boolean\n * handleClose:function (from parent component)\n * } params \n * CHANGES\n * 11/11 - Function Created, Code moved outside of class to avoid Hook errors with react - goethel\n */\n\nconst DialogBox = params => {\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        open = _React$useState2[0],\n        setOpen = _React$useState2[1];\n\n  if (params.props.DialogState == true && open == false) {\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n    params.props.handleClose();\n  };\n\n  const handleConfirmed = () => {\n    setOpen(false);\n    params.props.handleConfirmDraft();\n  };\n\n  return React.createElement(Dialog, {\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"alert-dialog-title\",\n    \"aria-describedby\": \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Draft This Player?\"), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    id: \"alert-dialog-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, params.props.player.NAME, \"\\n\", params.props.player.RATING)), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: handleConfirmed,\n    color: \"primary\",\n    autoFocus: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"Draft\")));\n};\n\nconst numPlayers = 30; // This is to allow for testing/development, so that we do not run over our server quota by pulling the whole database every time. Will be increased to top 2000 during demos\n\nconst data = require('./Player.json');\n/** This is the parent Component of all the components in the Draft Page, so that state can be shared easily\n * \n * @author shivi \n * \n * CHANGELOG\n * 11/01 Updated with documentation and a button linking to results page for testing - goethel\n * 10/30 Component Created - shivi\n */\n\n\nclass DraftPageMaster extends React.Component {\n  constructor(props) {\n    // This is where you should grab the settings from index browser storage to use throughout draft\n    super(props);\n    this.state = {\n      rows: [],\n      1: {},\n      2: {},\n      3: {},\n      4: {},\n      5: {},\n      6: {},\n      NumPlayersTeam: 12,\n      // Number of players per team (48 is a bit much!)\n      numTeams: 6,\n      // number of teams\n      DialogState: false,\n      curPlayerSelected: \"\",\n      // The player that the user double clicked on\n      draftedPlayer: \"\",\n      // This variable will update with the last drafted player\n      curTeam: 1,\n      draftType: \"normal\",\n      // Snake or Normal\n      snakeDraftSide: 1,\n      // Snake going forward round (1234) or backwards round (4321)\n      pickNum: 1 // CUrrent Pick #\n\n    }; // Any function used in callback must be bound here or React will not work with them\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleConfirmDraft = this.handleConfirmDraft.bind(this);\n  }\n  /** This function grabs the X number of players from firebase, and by default sorts by overall or rating\n   * \n   * @author goethel \n   * \n   * CHANGELOG\n   * 11/2 - file created - goethel\n   */\n\n\n  componentDidMount() {\n    var that = this; // var mostViewedPosts = firebase.database().ref('Players').orderByChild('RATING').limitToLast(numPlayers).once(\"value\").then(function(snapshot){\n    //     snapshot.forEach(function (childSnapshot) {\n    //         var childData = childSnapshot.val();\n    //         // This is where checks for Drafted players will occur\n    //         that.setState({rows:[...that.state.rows,childData]});\n    //     });\n    // });    \n\n    this.setState({\n      rows: data\n    });\n  }\n  /** This handles the initial opening of the DialogBox after the user double clicks on a player in the Data Grid\n   * \n   */\n\n\n  handleClick(playerSelected) {\n    this.setState({\n      DialogState: true,\n      curPlayerSelected: playerSelected\n    });\n  }\n  /** This function closes the dialog box, if the user clicks cancel\n   * \n   */\n\n\n  handleClose() {\n    this.setState({\n      DialogState: false\n    });\n  }\n  /** This is the function where the switchover code for changing who is drafting should occur\n   * \n   */\n\n\n  handleConfirmDraft() {\n    this.setState({\n      DialogState: false,\n      pickNum: this.state.pickNum + 1,\n      draftedPlayer: this.state.curPlayerSelected\n    });\n\n    if (this.isDraftDone() == true) {\n      this.DraftFinished();\n    } else {\n      if (this.state.draftType == \"normal\") {\n        if (this.state.curTeam == this.state.numTeams) {\n          this.setState({\n            curTeam: 1\n          });\n        } else {\n          this.setState({\n            curTeam: this.state.curTeam + 1\n          });\n        }\n      } // Code for evaluating next pick in snake draft\n      else if (this.state.draftType == \"snake\") {\n          console.log(this.state.curTeam + \", forward/back:\" + this.state.snakeDraftSide); // debug\n\n          if (this.state.snakeDraftSide == 1) {\n            if (this.state.curTeam == this.state.numTeams) {\n              this.setState({\n                snakeDraftSide: 0\n              });\n            } else {\n              this.setState({\n                curTeam: this.state.curTeam + 1\n              });\n            }\n          } else {\n            if (this.state.curTeam == 1) {\n              this.setState({\n                snakeDraftSide: 1\n              });\n            } else {\n              this.setState({\n                curTeam: this.state.curTeam - 1\n              });\n            }\n          }\n        } // Code for switching to next pick\n\n    }\n  }\n  /** This function will check if Draft is Done or not, treat as js function\n   * \n   */\n\n\n  isDraftDone() {\n    if (this.state.pickNum == this.state.numTeams * this.state.NumPlayersTeam) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /** This Function handles the eventual switchover to Results Page, and stores the Team data into the local browser storage to be used by the Results Page\n   * \n   */\n\n\n  DraftFinished() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      className: \"App-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Team \", this.state.curTeam, \" currently drafting\")), React.createElement(\"body\", {\n      className: \"draft-Body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(DialogBox, {\n      props: {\n        DialogState: this.state.DialogState,\n        handleClose: this.handleClose,\n        handleConfirmDraft: this.handleConfirmDraft,\n        player: this.state.curPlayerSelected\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(CurrentDraft, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(PlayerDatabase, {\n      props: {\n        rows: this.state.rows,\n        handleClick: this.handleClick\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(Formation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }), React.createElement(PlayerTeam, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, React.createElement(Button, {\n      href: \"../../resultpage.html\",\n      color: \"primary\",\n      variant: \"contained\",\n      className: \"results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, \"Results Page (TESTING ONLY)\")), React.createElement(\"a\", {\n      className: \"App-link\",\n      href: \"https://reactjs.org\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Built with React.js\"));\n  }\n\n  currentDraft() {}\n\n}\n\nexport default DraftPageMaster;","map":{"version":3,"sources":["/Users/andrew/Desktop/CS506 Project/fifa_dream_team/DraftPageReact/src/DraftPageMaster.js"],"names":["React","Formation","CurrentDraft","PlayerDatabase","PlayerTeam","Button","firebase","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","DialogBox","params","useState","open","setOpen","props","DialogState","handleClose","handleConfirmed","handleConfirmDraft","player","NAME","RATING","numPlayers","data","require","DraftPageMaster","Component","constructor","state","rows","NumPlayersTeam","numTeams","curPlayerSelected","draftedPlayer","curTeam","draftType","snakeDraftSide","pickNum","handleClick","bind","componentDidMount","that","setState","playerSelected","isDraftDone","DraftFinished","console","log","render","currentDraft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Formation from './Formation';\nimport CurrentDraft from './CurrentDraft';\nimport PlayerDatabase from './Components/Database.jsx';\nimport PlayerTeam from './Components/PlayerTeam.jsx';\nimport Button from '@material-ui/core/Button';\nimport firebase from './Firebase/firebase'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/** This is an arrow function to set up the Dialog/Confirmation popup to draft a player they clicked on\n * @author goethel\n * @param {\n * DialogState:boolean\n * handleClose:function (from parent component)\n * } params \n * CHANGES\n * 11/11 - Function Created, Code moved outside of class to avoid Hook errors with react - goethel\n */\nconst DialogBox = (params) => {\n    const [open, setOpen] = React.useState(false);\n    \nif(params.props.DialogState == true && open == false) {\n    setOpen(true);\n}\nconst  handleClose = () => {\n    setOpen(false);\n    params.props.handleClose();\n}\nconst  handleConfirmed = () => {\n    setOpen(false);\n    params.props.handleConfirmDraft();\n}\n    return(<Dialog\n    open={open}\n    onClose={handleClose}\n    aria-labelledby=\"alert-dialog-title\"\n    aria-describedby=\"alert-dialog-description\"\n    >\n    <DialogTitle id=\"alert-dialog-title\">{\"Draft This Player?\"}</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"alert-dialog-description\">\n        {params.props.player.NAME}{\"\\n\"}\n        {params.props.player.RATING}\n      </DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={handleClose} color=\"primary\">\n        Cancel\n      </Button>\n      <Button onClick={handleConfirmed} color=\"primary\" autoFocus>\n        Draft\n      </Button>\n    </DialogActions>\n    </Dialog>);\n}\n\nconst numPlayers = 30; // This is to allow for testing/development, so that we do not run over our server quota by pulling the whole database every time. Will be increased to top 2000 during demos\nconst data=require('./Player.json');\n/** This is the parent Component of all the components in the Draft Page, so that state can be shared easily\n * \n * @author shivi \n * \n * CHANGELOG\n * 11/01 Updated with documentation and a button linking to results page for testing - goethel\n * 10/30 Component Created - shivi\n */\nclass DraftPageMaster extends React.Component {\n    \n    constructor(props) {\n        // This is where you should grab the settings from index browser storage to use throughout draft\n        super(props);\n        this.state = {\n\t\trows:[],\n                1:{},\n                2:{},\n                3:{},\n                4:{},\n                5:{},\n                6:{},\n                \n        NumPlayersTeam:12, // Number of players per team (48 is a bit much!)\n        numTeams:6, // number of teams\n        DialogState:false,\n        curPlayerSelected:\"\", // The player that the user double clicked on\n        draftedPlayer:\"\", // This variable will update with the last drafted player\n        curTeam:1,\n        draftType:\"normal\", // Snake or Normal\n        snakeDraftSide:1, // Snake going forward round (1234) or backwards round (4321)\n        pickNum:1 // CUrrent Pick #\n\n        }\n\n    // Any function used in callback must be bound here or React will not work with them\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleConfirmDraft = this.handleConfirmDraft.bind(this);\n    }\n    /** This function grabs the X number of players from firebase, and by default sorts by overall or rating\n     * \n     * @author goethel \n     * \n     * CHANGELOG\n     * 11/2 - file created - goethel\n     */\n    componentDidMount() {\n        var that = this;\n        // var mostViewedPosts = firebase.database().ref('Players').orderByChild('RATING').limitToLast(numPlayers).once(\"value\").then(function(snapshot){\n        //     snapshot.forEach(function (childSnapshot) {\n        //         var childData = childSnapshot.val();\n        //         // This is where checks for Drafted players will occur\n        //         that.setState({rows:[...that.state.rows,childData]});\n        //     });\n        // });    \n        this.setState({rows:data})\n     \n    }\n    /** This handles the initial opening of the DialogBox after the user double clicks on a player in the Data Grid\n     * \n     */\n    handleClick(playerSelected) {\n        this.setState({DialogState:true,curPlayerSelected:playerSelected})\n    }\n    /** This function closes the dialog box, if the user clicks cancel\n     * \n     */\n    handleClose() {\n        this.setState({DialogState:false})\n    }\n    /** This is the function where the switchover code for changing who is drafting should occur\n     * \n     */\n    handleConfirmDraft() {\n        this.setState({DialogState:false,pickNum:(this.state.pickNum+1),draftedPlayer:this.state.curPlayerSelected});\n        if(this.isDraftDone() == true) {\n            this.DraftFinished();\n        }\n        else {\n            if(this.state.draftType == \"normal\") {\n                if(this.state.curTeam==this.state.numTeams) {\n                    this.setState({curTeam:1});\n                }\n                else {\n                    this.setState({curTeam:(this.state.curTeam+1)})\n                }\n            }\n            // Code for evaluating next pick in snake draft\n            else if(this.state.draftType == \"snake\") {\n                console.log(this.state.curTeam+\", forward/back:\"+this.state.snakeDraftSide); // debug\n                    if(this.state.snakeDraftSide == 1) {\n                        if(this.state.curTeam == this.state.numTeams) {\n                            this.setState({snakeDraftSide:0})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam+1)})\n                        }\n                    }\n                    else {\n                        if(this.state.curTeam == 1) {\n                            this.setState({snakeDraftSide:1})\n                        }\n                        else {\n                        this.setState({curTeam:(this.state.curTeam-1)})\n                        }\n                    }\n                \n            }\n            // Code for switching to next pick\n            \n        }\n    }\n    /** This function will check if Draft is Done or not, treat as js function\n     * \n     */\n    isDraftDone() {\n        if(this.state.pickNum == this.state.numTeams*this.state.NumPlayersTeam) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /** This Function handles the eventual switchover to Results Page, and stores the Team data into the local browser storage to be used by the Results Page\n     * \n     */\n    DraftFinished() {\n\n    }\n    render() {\n        return(\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>\n                    Team {this.state.curTeam} currently drafting\n                    </h1>\n                </header>\n                <body className=\"draft-Body\">\n                \n                    <DialogBox props={{DialogState:this.state.DialogState,handleClose:this.handleClose,handleConfirmDraft:this.handleConfirmDraft,player:this.state.curPlayerSelected}}></DialogBox>\n                    <CurrentDraft/>\n                    <PlayerDatabase props={{rows:this.state.rows,handleClick:this.handleClick}}></PlayerDatabase>\n                    <div>\n                    <Formation/>\n                    <PlayerTeam ></PlayerTeam>\n                    </div>\n                    \n                </body>\n                <div>\n                <Button href=\"../../resultpage.html\" color=\"primary\" variant=\"contained\" className=\"results\">Results Page (TESTING ONLY)</Button>\n                </div>\n                \n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                    Built with React.js\n                 </a>\n            </div>\n        )\n    }\n    currentDraft(){\n\n    }\n}\n\nexport default DraftPageMaster;"]},"metadata":{},"sourceType":"module"}